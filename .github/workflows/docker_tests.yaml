name: Docker tests
on:
  pull_request:
    branches: [master]

permissions:
  packages: write
  actions: read

env:
  IMAGE_NAME: 'ghcr.io/${{ github.repository }}'

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build frontend with cache and push to registry
        run: |
          docker build \
            -f Dockerfile.frontend \
            --cache-from "$IMAGE_NAME/frontend:latest" \
            -t "$IMAGE_NAME/frontend:$GITHUB_SHA" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg SANITY_DATASET=$SANITY_DATASET \
            .
          docker push "$IMAGE_NAME/frontend" --all-tags
        env:
          DOCKER_BUILDKIT: 1
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          SANITY_DATASET: testing

  build_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build backend with cache and push to registry
        run: |
          cd backend
          docker build \
            --cache-from "$IMAGE_NAME/backend:latest" \
            -t "$IMAGE_NAME/backend:$GITHUB_SHA" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .
          docker push "$IMAGE_NAME/backend" --all-tags
        env:
          DOCKER_BUILDKIT: 1
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  kotest_tests:
    runs-on: ubuntu-latest
    needs: build_backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull Docker image
        run: docker pull "$IMAGE_NAME/backend:$GITHUB_SHA"
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Run Kotest tests with Docker Compose
        run: docker compose -f backend/docker-compose.kotest.yaml up --exit-code-from=backend
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ github.sha }}
          ADMIN_KEY: admin-passord

  cypress_tests:
    runs-on: ubuntu-latest
    needs: [build_frontend, build_backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull Docker images
        run: |
          docker pull "$IMAGE_NAME/backend:$GITHUB_SHA"
          docker pull "$IMAGE_NAME/frontend:$GITHUB_SHA"
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Run Cypress end-to-end tests
        run: docker compose -f docker-compose.cypress.yaml up --exit-code-from=frontend --attach=frontend
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ github.sha }}
          SANITY_DATASET: testing
          ADMIN_KEY: admin-passord
          NEXTAUTH_SECRET: very-secret-string-123

  migration_tests:
    runs-on: ubuntu-latest
    needs: [build_backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull Docker image
        run: docker pull "$IMAGE_NAME/backend:$GITHUB_SHA"
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Download database dump
        run: |
          heroku pg:backups:capture -a $HEROKU_APP_NAME
          heroku pg:backups:download -a $HEROKU_APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: 'echo-web-backend-prod'

      - name: Run migration tests
        run: |
          docker compose -f backend/docker-compose.yaml up database --wait
          docker cp latest.dump backend-database-1:/
          docker exec -i backend-database-1 pg_restore --verbose --clean --no-acl --no-owner -h localhost -U postgres -d postgres latest.dump || true
          docker compose -f backend/docker-compose.yaml up backend & (sleep 15 && docker kill backend-backend-1)
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ github.sha }}
          TEST_MIGRATION: true
          ADMIN_KEY: admin-passord
