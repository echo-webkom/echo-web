version: '3.9'
services:
  frontend:
    build:
      dockerfile: Dockerfile.frontend
    image: '${IMAGE_NAME:-echo-webkom/echo-web}/frontend:${FRONTEND_TAG:-latest}'
    command: bash -c "yarn --cwd frontend start & yarn --cwd frontend cypress run --config video=false,screenshotOnRunFailure=false -b firefox && kill $$!"
    # Don't start tests before backend is up.
    depends_on:
      backend:
        condition: service_healthy
    links:
      - backend
    ports:
      - '3000:3000'
    environment:
      NEXT_PUBLIC_BACKEND_URL: http://backend:8080
      # Values from .env file.
      SANITY_DATASET: ${SANITY_DATASET:?Must specify SANITY_DATASET in .env file or environment.}
      ADMIN_KEY: ${ADMIN_KEY:?Must specify ADMIN_KEY in .env file or environment.}
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-very-secret-string-123}
      FEIDE_CLIENT_ID: ${FEIDE_CLIENT_ID:?Must specify FEIDE_CLIENT_ID in .env file or environment.}
      FEIDE_CLIENT_SECRET: ${FEIDE_CLIENT_SECRET:?Must specify FEIDE_CLIENT_SECRET in .env file or environment.}
      CYPRESS_FEIDE_USERNAME: ${CYPRESS_FEIDE_USERNAME:?Must specify CYPRESS_FEIDE_USERNAME in .env file or environment.}
      CYPRESS_FEIDE_PASSWORD: ${CYPRESS_FEIDE_PASSWORD:?Must specify CYPRESS_FEIDE_PASSWORD in .env file or environment.}
      CYPRESS_FEIDE_FULL_NAME: ${CYPRESS_FEIDE_FULL_NAME:?Must specify CYPRESS_FEIDE_FULL_NAME in .env file or environment.}
      CYPRESS_FEIDE_EMAIL: ${CYPRESS_FEIDE_EMAIL:?Must specify CYPRESS_FEIDE_EMAIL in .env file or environment.}

  backend:
    build: backend
    image: '${IMAGE_NAME:-echo-webkom/echo-web}/backend:${BACKEND_TAG:-latest}'
    # Don't start backend before database is up.
    depends_on:
      database:
        condition: service_healthy
    links:
      - database
    ports:
      - '8080:8080'
    # Check if backend is ready, and insert bedpres for testing.
    healthcheck:
      test: ['CMD-SHELL', 'curl -v http://localhost:8080/status || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      driver: 'none'
    environment:
      DATABASE_URL: postgres://postgres:password@database/postgres
      # The value of DEV doesn't matter, only that it's defined.
      DEV: 'yes'
      # Values from .env file.
      ADMIN_KEY: ${ADMIN_KEY:?Must specify ADMIN_KEY in .env file or environment.}

  database:
    image: postgres:15.0-alpine
    restart: always
    ports:
      - '5432:5432'
    # Check if database is ready.
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
